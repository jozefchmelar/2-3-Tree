
 public LinkedList<NodeElement<DataType, KeyType>> GetIntervalSearchOnTree(Node<DataType, KeyType> paNode, KeyType paMinValueOfKey, KeyType paMaxValueOfKey, ref LinkedList<KeyValuePair<KeyType, DataType>> linkedKeyValueData)
        {
            Node<DataType, KeyType> actual = paNode;
            Queue<Node<DataType, KeyType>> helpQueue = new Queue<Node<DataType, KeyType>>();
            LinkedList<NodeElement<DataType, KeyType>> intervalSearchLinkedNodeElement = new LinkedList<NodeElement<DataType, KeyType>>();
            helpQueue.Enqueue(actual);

            while (true)
            {
                if (helpQueue.Count > 0)
                    actual = helpQueue.Dequeue();
                else
                    return intervalSearchLinkedNodeElement;

                this.SortElements(Comparator, actual);
                if (this.IsDoubleNode(actual))
                {
                    if (IsInInterval(actual.LeftElement.Key, paMinValueOfKey, paMaxValueOfKey))
                    {
                        intervalSearchLinkedNodeElement.AddLast(actual.LeftElement);
                        linkedKeyValueData.AddLast(
                            new KeyValuePair<KeyType, DataType>(actual.LeftElement.Key, actual.LeftElement.Data));
                        if (!this.IsLeaf(actual))
                        {
                            helpQueue.Enqueue(actual.LeftSon);
                            helpQueue.Enqueue(actual.RightSon);
                        }
                    }
                    else
                    {
                        //  ak je aktualnyKluc < minValue  nechod vlavo
                        // ak je aktualnyKluc > maxValue
                        if (!this.IsLeaf(actual))
                        {
                            if (Comparator.Compare(actual.LeftElement.Key, paMinValueOfKey) == CommonConstants.LeftIsBigger)
                                helpQueue.Enqueue(actual.LeftSon);
                            if (Comparator.Compare(actual.LeftElement.Key, paMaxValueOfKey) == CommonConstants.RightIsBigger)
                                helpQueue.Enqueue(actual.RightSon);
                        }
                    }
                }
                else
                {
                    // triple node
                    if (this.IsInInterval(actual.LeftElement.Key, paMinValueOfKey, paMaxValueOfKey))
                    {
                        intervalSearchLinkedNodeElement.AddLast(actual.LeftElement);
                        linkedKeyValueData.AddLast(
                            new KeyValuePair<KeyType, DataType>(actual.LeftElement.Key, actual.LeftElement.Data));
                        if (!this.IsLeaf(actual))
                            helpQueue.Enqueue(actual.LeftSon);
                    }
                    else
                    {
                        //laveho berem ak aktualny kluc > minValue
                        if (!this.IsLeaf(actual))
                            if (Comparator.Compare(actual.LeftElement.Key, paMinValueOfKey) == CommonConstants.LeftIsBigger)
                                helpQueue.Enqueue(actual.LeftSon);
                    }
                    if (this.IsInInterval(actual.RightElement.Key, paMinValueOfKey, paMaxValueOfKey))
                    {
                        intervalSearchLinkedNodeElement.AddLast(actual.RightElement);
                        linkedKeyValueData.AddLast(
                            new KeyValuePair<KeyType, DataType>(actual.RightElement.Key, actual.RightElement.Data));
                        if (!IsLeaf(actual))
                            helpQueue.Enqueue(actual.RightSon);
                    }
                    else
                    {
                        if (!this.IsLeaf(actual))
                            if (Comparator.Compare(actual.RightElement.Key, paMaxValueOfKey) == CommonConstants.RightIsBigger)
                                helpQueue.Enqueue(actual.RightSon);
                    }
                    if (!this.IsLeaf(actual))
                        helpQueue.Enqueue(actual.MiddleSon);
                }
            }
        }